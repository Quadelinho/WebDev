// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApiTest.Infrastructure.Data;

namespace RestApiTest.Infrastructure.Migrations
{
    [DbContext(typeof(ForumContext))]
    [Migration("20190629182250_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RestApiTest.Core.Models.BlogPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long?>("TagId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TagId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BlogPost");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<long?>("AuthorId");

                    b.Property<long?>("CommentId");

                    b.Property<string>("Content");

                    b.Property<bool>("IsAdministrativeNote");

                    b.Property<bool>("IsRecommendedSolution");

                    b.Property<DateTime>("Modified");

                    b.Property<long>("Points");

                    b.Property<long?>("RelatedPostId");

                    b.Property<DateTime>("SentDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentId");

                    b.HasIndex("RelatedPostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.ForumUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsConfirmed");

                    b.Property<DateTime>("LastLoggedIn");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisteredSince");

                    b.Property<int>("ReputationPoints");

                    b.Property<int>("Role");

                    b.Property<bool>("SubscribedToNewsletter");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long?>("QuestionPostId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPostId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLike");

                    b.Property<DateTime>("Modified");

                    b.Property<long?>("VotedCommentId");

                    b.Property<long?>("VotedPostId");

                    b.Property<long?>("VoterId");

                    b.HasKey("Id");

                    b.HasIndex("VotedCommentId");

                    b.HasIndex("VotedPostId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.QuestionPost", b =>
                {
                    b.HasBaseType("RestApiTest.Core.Models.BlogPost");

                    b.Property<bool?>("Approved");

                    b.Property<bool>("IsSolved");

                    b.HasDiscriminator().HasValue("QuestionPost");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.BlogPost", b =>
                {
                    b.HasOne("RestApiTest.Core.Models.ForumUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("RestApiTest.Core.Models.Tag")
                        .WithMany("RelatedPosts")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Comment", b =>
                {
                    b.HasOne("RestApiTest.Core.Models.ForumUser", "Author")
                        .WithMany("UsersComments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("RestApiTest.Core.Models.Comment")
                        .WithMany("Responses")
                        .HasForeignKey("CommentId");

                    b.HasOne("RestApiTest.Core.Models.BlogPost", "RelatedPost")
                        .WithMany("Comments")
                        .HasForeignKey("RelatedPostId");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Tag", b =>
                {
                    b.HasOne("RestApiTest.Core.Models.QuestionPost")
                        .WithMany("Tags")
                        .HasForeignKey("QuestionPostId");
                });

            modelBuilder.Entity("RestApiTest.Core.Models.Vote", b =>
                {
                    b.HasOne("RestApiTest.Core.Models.Comment", "VotedComment")
                        .WithMany("Votes")
                        .HasForeignKey("VotedCommentId");

                    b.HasOne("RestApiTest.Core.Models.BlogPost", "VotedPost")
                        .WithMany("Votes")
                        .HasForeignKey("VotedPostId");

                    b.HasOne("RestApiTest.Core.Models.ForumUser", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId");
                });
#pragma warning restore 612, 618
        }
    }
}
